---
import Layout from '~/layouts/PageLayout.astro';

const metadata = {
  title: 'E-commerce Launch Cost Estimator - Budget Calculator',
  description: 'Calculate estimated costs for launching your e-commerce brand. Get cost breakdowns for product sourcing, inventory, marketing, and total launch costs.',
  keywords: 'e-commerce launch cost, startup cost calculator, business launch budget, e-commerce cost estimator',
  canonical: 'https://www.sellingwithnas.com/tools/launch-cost-estimator',
} ;
---

<Layout metadata={metadata}>
  <div class="container">
    <div class="header">
      <h1>E-commerce Brand Launch Cost Estimator</h1>
      <p>Get estimated costs for launching your e-commerce brand</p>
    </div>
    
    <div class="main-content">
      <div class="input-section">
        <h2 class="section-title">Product Information</h2>
        
        <div class="input-group">
          <label for="productType">Product Category</label>
          <select id="productType">
            <option value="">Select a category</option>
            <option value="electronics">Electronics & Tech</option>
            <option value="fashion">Fashion & Apparel</option>
            <option value="beauty">Beauty & Skincare</option>
            <option value="fitness">Fitness & Sports</option>
            <option value="home">Home & Garden</option>
            <option value="jewelry">Jewelry & Accessories</option>
            <option value="books">Books & Media</option>
            <option value="toys">Toys & Games</option>
            <option value="food">Food & Beverages</option>
            <option value="other">Other</option>
          </select>
        </div>
        
        <div class="input-group">
          <label for="targetPrice">Expected Product Price ($)</label>
          <input type="number" id="targetPrice" placeholder="e.g., 50" min="1">
        </div>
        
        <div class="input-group">
          <label for="targetMarket">Target Market</label>
          <select id="targetMarket">
            <option value="us">United States</option>
            <option value="europe">Europe</option>
            <option value="global">Global</option>
            <option value="other">Other</option>
          </select>
        </div>
        
        <div class="input-group">
          <label for="businessScale">Business Scale</label>
          <select id="businessScale">
            <option value="small">Small Scale (Testing)</option>
            <option value="medium">Medium Scale (Growth)</option>
            <option value="large">Large Scale (Aggressive)</option>
          </select>
        </div>
        
        <button class="analyze-btn" id="analyze-button">
          Calculate Launch Costs
        </button>
        
        <div class="loading" id="loading">
          <div class="spinner"></div>
          <p>Calculating your launch costs...</p>
        </div>
        
        <div class="error" id="error">
          <p id="errorMessage"></p>
        </div>
      </div>
      
      <div class="results-section">
        <h2 class="section-title">Cost Analysis</h2>
        
        <div class="results" id="results">
          <div class="analysis-box">
            <h3>Launch Cost Analysis</h3>
            <p id="analysisRationale">
              Your estimated launch costs are based on your product category, target price point, market scope, and business scale. These ranges reflect current market conditions and typical startup requirements.
            </p>
          </div>
          
          <div class="cost-breakdown">
            <h3>Estimated Launch Costs</h3>
            <div id="costItems">
              <!-- Results will be populated here -->
            </div>
          </div>
          
          <div class="considerations">
            <h3>Key Considerations</h3>
            <div id="considerationsContent">
              <!-- Considerations will be populated here -->
            </div>
          </div>
        </div>
        
        <div class="placeholder" id="placeholder">
          <p>Select your product details on the left to see cost estimates</p>
        </div>
      </div>
    </div>
  </div>
</Layout>

<style>
  * {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
  }

  .container {
    max-width: 1200px;
    margin: 40px auto;
    background: white;
    border-radius: 20px;
    box-shadow: 0 20px 40px rgba(0,0,0,0.1);
    overflow: hidden;
  }

  .header {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    padding: 40px;
    text-align: center;
  }

  .header h1 {
    font-size: 2.5rem;
    margin-bottom: 10px;
    font-weight: 700;
  }

  .header p {
    font-size: 1.1rem;
    opacity: 0.9;
  }

  .main-content {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 0;
    min-height: 600px;
  }

  .input-section {
    padding: 40px;
    background: #f8f9fa;
    border-right: 1px solid #e9ecef;
  }

  .results-section {
    padding: 40px;
    background: white;
  }

  .section-title {
    font-size: 1.5rem;
    font-weight: 600;
    margin-bottom: 30px;
    color: #2c3e50;
  }

  .input-group {
    margin-bottom: 25px;
  }

  .input-group label {
    display: block;
    margin-bottom: 8px;
    font-weight: 500;
    color: #2c3e50;
  }

  .input-group input, .input-group select {
    width: 100%;
    padding: 15px;
    border: 2px solid #e9ecef;
    border-radius: 8px;
    font-size: 1rem;
    transition: border-color 0.3s ease;
    background: white;
  }

  .input-group input:focus, .input-group select:focus {
    outline: none;
    border-color: #667eea;
  }

  .analyze-btn {
    width: 100%;
    padding: 15px;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    border: none;
    border-radius: 8px;
    font-size: 1.1rem;
    font-weight: 600;
    cursor: pointer;
    transition: transform 0.2s ease, box-shadow 0.2s ease;
  }

  .analyze-btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 10px 20px rgba(102, 126, 234, 0.3);
  }

  .analyze-btn:disabled {
    background: #6c757d;
    cursor: not-allowed;
    transform: none;
    box-shadow: none;
  }

  .loading {
    display: none;
    text-align: center;
    color: #667eea;
    margin-top: 20px;
  }

  .loading.show {
    display: block;
  }

  .spinner {
    border: 3px solid #f3f3f3;
    border-top: 3px solid #667eea;
    border-radius: 50%;
    width: 30px;
    height: 30px;
    animation: spin 1s linear infinite;
    margin: 0 auto 10px;
  }

  @keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }

  .results {
    display: none;
  }

  .results.show {
    display: block;
  }

  .placeholder {
    text-align: center;
    color: #6c757d;
    margin-top: 30px;
  }

  .placeholder.hide {
    display: none;
  }

  .analysis-box {
    background: #e8f4fd;
    border-radius: 12px;
    padding: 20px;
    margin-bottom: 25px;
    border-left: 4px solid #667eea;
  }

  .analysis-box h3 {
    color: #2c3e50;
    margin-bottom: 10px;
  }

  .analysis-box p {
    color: #2c3e50;
    line-height: 1.6;
  }

  .cost-breakdown {
    background: #f8f9fa;
    border-radius: 12px;
    padding: 20px;
    margin-bottom: 25px;
  }

  .cost-breakdown h3 {
    margin-bottom: 15px;
    color: #2c3e50;
  }

  .cost-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 12px 0;
    border-bottom: 1px solid #e9ecef;
  }

  .cost-item:last-child {
    border-bottom: none;
    font-weight: 600;
    font-size: 1.1rem;
    color: #667eea;
    margin-top: 10px;
    padding-top: 15px;
    border-top: 2px solid #667eea;
  }

  .cost-label {
    color: #2c3e50;
    font-weight: 500;
  }

  .cost-value {
    font-weight: 600;
    color: #2c3e50;
  }

  .cost-description {
    font-size: 0.9rem;
    color: #6c757d;
    margin-top: 4px;
  }

  .considerations {
    background: #e7f3ff;
    border-left: 4px solid #667eea;
    padding: 20px;
    border-radius: 8px;
  }

  .considerations h3 {
    color: #2c3e50;
    margin-bottom: 15px;
  }

  .considerations ul {
    color: #2c3e50;
    padding-left: 20px;
    line-height: 1.6;
  }

  .considerations li {
    margin-bottom: 10px;
  }

  .error {
    background: #f8d7da;
    color: #721c24;
    padding: 15px;
    border-radius: 8px;
    margin-top: 20px;
    display: none;
  }

  .error.show {
    display: block;
  }

  @media (max-width: 768px) {
    .main-content {
      grid-template-columns: 1fr;
    }
    
    .input-section {
      border-right: none;
      border-bottom: 1px solid #e9ecef;
    }
    
    .header h1 {
      font-size: 2rem;
    }

    .container {
      margin: 20px;
    }
  }

  /* Dark mode support */
  :global(.dark) .container {
    background: #1e293b;
  }

  :global(.dark) .input-section {
    background: #0f172a;
    color: #ffffff;
  }

  :global(.dark) .results-section {
    background: #1e293b;
    color: #ffffff;
  }

  :global(.dark) .section-title {
    color: #ffffff;
  }

  :global(.dark) .input-group label {
    color: #e0e0e0;
  }

  :global(.dark) .input-group input,
  :global(.dark) .input-group select {
    background: #374151;
    border-color: #4b5563;
    color: #ffffff;
  }

  :global(.dark) .cost-breakdown {
    background: #374151;
  }

  :global(.dark) .cost-label,
  :global(.dark) .cost-value {
    color: #ffffff;
  }

  :global(.dark) .analysis-box {
    background: #1e3a8a;
    color: #ffffff;
  }

  :global(.dark) .analysis-box h3,
  :global(.dark) .analysis-box p {
    color: #ffffff;
  }

  :global(.dark) .considerations {
    background: #1e3a8a;
    color: #ffffff;
  }

  :global(.dark) .considerations h3,
  :global(.dark) .considerations li {
    color: #ffffff;
  }
</style>

<script>
  // Cost calculation logic
  const costData = {
    electronics: {
      sourcing: [3000, 10000],
      inventory: [8000, 25000],
      shipping: [1200, 3500],
      platform: [2000, 6000],
      marketing: [5000, 15000],
      legal: [800, 2500],
      working: [3000, 10000],
      considerations: [
        "Electronics require FCC/CE certifications and safety testing",
        "Higher import duties (15-25%) for electronic products from China",
        "Consider warranty and return costs for tech products",
        "Competition is fierce - budget extra for advertising",
        "Product updates and software support may be needed"
      ]
    },
    fashion: {
      sourcing: [2000, 8000],
      inventory: [5000, 20000],
      shipping: [800, 2500],
      platform: [1500, 5000],
      marketing: [4000, 12000],
      legal: [500, 1500],
      working: [2500, 8000],
      considerations: [
        "High return rates (20-30%) are common in fashion",
        "Seasonal inventory planning is crucial",
        "Size charts and fit guides reduce returns",
        "Influencer marketing is highly effective",
        "Fast fashion trends require quick inventory turnover"
      ]
    },
    beauty: {
      sourcing: [2500, 9000],
      inventory: [6000, 22000],
      shipping: [1000, 3000],
      platform: [1800, 5500],
      marketing: [6000, 18000],
      legal: [1000, 3000],
      working: [3000, 9000],
      considerations: [
        "FDA regulations and ingredient compliance required",
        "Beauty products have expiration dates to manage",
        "Influencer partnerships are essential for growth",
        "Before/after content drives conversions",
        "Customer reviews and testimonials are crucial"
      ]
    },
    fitness: {
      sourcing: [2200, 7500],
      inventory: [5500, 18000],
      shipping: [900, 2800],
      platform: [1600, 4500],
      marketing: [4500, 13000],
      legal: [600, 2000],
      working: [2800, 8500],
      considerations: [
        "Fitness trends change rapidly - stay current",
        "Seasonal demand spikes (New Year, summer)",
        "Video content and demonstrations boost sales",
        "Partner with fitness influencers and trainers",
        "Consider equipment weight for shipping costs"
      ]
    },
    home: {
      sourcing: [2800, 9500],
      inventory: [7000, 24000],
      shipping: [1400, 4000],
      platform: [1700, 5200],
      marketing: [3500, 11000],
      legal: [700, 2200],
      working: [3200, 9800],
      considerations: [
        "Home products often have seasonal demand patterns",
        "Larger items increase shipping and storage costs",
        "Room setting photos improve conversion rates",
        "Interior design trends affect product popularity",
        "Consider fragile item packaging and insurance"
      ]
    },
    jewelry: {
      sourcing: [3500, 12000],
      inventory: [8500, 30000],
      shipping: [600, 1800],
      platform: [2200, 6500],
      marketing: [5500, 16000],
      legal: [1200, 3500],
      working: [4000, 12000],
      considerations: [
        "High-value items require insurance and secure shipping",
        "Authentication and quality certificates build trust",
        "Jewelry photography requires professional lighting",
        "Gift seasons (holidays, Valentine's) drive sales",
        "Consider metal allergies and material disclosures"
      ]
    }
  };

  // Default costs for other categories
  const defaultCosts = {
    sourcing: [2500, 8000],
    inventory: [6000, 20000],
    shipping: [1000, 3000],
    platform: [1500, 5000],
    marketing: [4000, 12000],
    legal: [600, 2000],
    working: [2500, 8000],
    considerations: [
      "Research your specific product category regulations",
      "Test with small inventory before scaling up",
      "Customer service quality impacts repeat purchases",
      "Plan for seasonal demand fluctuations",
      "Build email list before launch for initial customers"
    ]
  };

  document.addEventListener('DOMContentLoaded', function() {
    console.log('Launch cost estimator loaded');
    
const analyzeBtn = document.getElementById('analyze-button');
    
    if (analyzeBtn) {
      analyzeBtn.addEventListener('click', function() {
        calculateCosts();
      });
    }
  });

  function calculateCosts() {
    const productType = document.getElementById('productType').value;
    const targetPrice = parseInt(document.getElementById('targetPrice').value) || 50;
    const targetMarket = document.getElementById('targetMarket').value;
    const businessScale = document.getElementById('businessScale').value;

    if (!productType) {
      showError('Please select a product category');
      return;
    }

    // Show loading
    showLoading();
    hideError();

    // Simulate calculation delay
    setTimeout(() => {
      const costs = costData[productType] || defaultCosts;
      
      // Adjust costs based on business scale
      const scaleMultiplier = businessScale === 'small' ? 0.7 : businessScale === 'large' ? 1.3 : 1;
      
      // Adjust costs based on target price
      const priceMultiplier = targetPrice < 25 ? 0.8 : targetPrice > 100 ? 1.2 : 1;
      
      const finalMultiplier = scaleMultiplier * priceMultiplier;

      const finalCosts = {
        sourcing: [Math.round(costs.sourcing[0] * finalMultiplier), Math.round(costs.sourcing[1] * finalMultiplier)],
        inventory: [Math.round(costs.inventory[0] * finalMultiplier), Math.round(costs.inventory[1] * finalMultiplier)],
        shipping: [Math.round(costs.shipping[0] * finalMultiplier), Math.round(costs.shipping[1] * finalMultiplier)],
        platform: [Math.round(costs.platform[0] * finalMultiplier), Math.round(costs.platform[1] * finalMultiplier)],
        marketing: [Math.round(costs.marketing[0] * finalMultiplier), Math.round(costs.marketing[1] * finalMultiplier)],
        legal: [Math.round(costs.legal[0] * finalMultiplier), Math.round(costs.legal[1] * finalMultiplier)],
        working: [Math.round(costs.working[0] * finalMultiplier), Math.round(costs.working[1] * finalMultiplier)]
      };

      displayResults(finalCosts, costs.considerations, productType, targetPrice, businessScale);
      hideLoading();
      showResults();
    }, 2000);
  }

  function displayResults(costs, considerations, productType, targetPrice, businessScale) {
    // Hide placeholder
    document.getElementById('placeholder').classList.add('hide');

    // Update rationale
    const rationale = `Based on your ${productType} product with a target price of $${targetPrice} and ${businessScale} scale approach, here's your estimated launch cost breakdown. These ranges account for different quality levels and market positioning strategies.`;
    document.getElementById('analysisRationale').textContent = rationale;

    // Calculate total
    const totalMin = costs.sourcing[0] + costs.inventory[0] + costs.shipping[0] + costs.platform[0] + costs.marketing[0] + costs.legal[0] + costs.working[0];
    const totalMax = costs.sourcing[1] + costs.inventory[1] + costs.shipping[1] + costs.platform[1] + costs.marketing[1] + costs.legal[1] + costs.working[1];

    // Display cost breakdown
    const costItemsHTML = `
      <div class="cost-item">
        <div>
          <div class="cost-label">Product Sourcing & Development</div>
          <div class="cost-description">Samples, supplier setup, product development</div>
        </div>
        <div class="cost-value">$${costs.sourcing[0].toLocaleString()} - $${costs.sourcing[1].toLocaleString()}</div>
      </div>
      <div class="cost-item">
        <div>
          <div class="cost-label">Initial Inventory (MOQ)</div>
          <div class="cost-description">Minimum order quantity based on your scale</div>
        </div>
        <div class="cost-value">$${costs.inventory[0].toLocaleString()} - $${costs.inventory[1].toLocaleString()}</div>
      </div>
      <div class="cost-item">
        <div>
          <div class="cost-label">Shipping & Import Costs</div>
          <div class="cost-description">International shipping, customs, duties</div>
        </div>
        <div class="cost-value">$${costs.shipping[0].toLocaleString()} - $${costs.shipping[1].toLocaleString()}</div>
      </div>
      <div class="cost-item">
        <div>
          <div class="cost-label">E-commerce Platform Setup</div>
          <div class="cost-description">Website, hosting, apps, payment processing</div>
        </div>
        <div class="cost-value">$${costs.platform[0].toLocaleString()} - $${costs.platform[1].toLocaleString()}</div>
      </div>
      <div class="cost-item">
        <div>
          <div class="cost-label">Initial Marketing & Advertising</div>
          <div class="cost-description">First 3 months of customer acquisition</div>
        </div>
        <div class="cost-value">$${costs.marketing[0].toLocaleString()} - $${costs.marketing[1].toLocaleString()}</div>
      </div>
      <div class="cost-item">
        <div>
          <div class="cost-label">Legal & Compliance</div>
          <div class="cost-description">Business registration, insurance, certifications</div>
        </div>
        <div class="cost-value">$${costs.legal[0].toLocaleString()} - $${costs.legal[1].toLocaleString()}</div>
      </div>
      <div class="cost-item">
        <div>
          <div class="cost-label">Working Capital & Buffer</div>
          <div class="cost-description">3-month operational buffer and unexpected costs</div>
        </div>
        <div class="cost-value">$${costs.working[0].toLocaleString()} - $${costs.working[1].toLocaleString()}</div>
      </div>
      <div class="cost-item">
        <div class="cost-label">Total Estimated Launch Cost</div>
        <div class="cost-value">$${totalMin.toLocaleString()} - $${totalMax.toLocaleString()}</div>
      </div>
    `;

    document.getElementById('costItems').innerHTML = costItemsHTML;

    // Display considerations
    let considerationsHTML = '<ul>';
    considerations.forEach(consideration => {
      considerationsHTML += `<li>${consideration}</li>`;
    });
    considerationsHTML += '</ul>';
    document.getElementById('considerationsContent').innerHTML = considerationsHTML;
  }

  function showLoading() {
    document.getElementById('loading').classList.add('show');
  }

  function hideLoading() {
    document.getElementById('loading').classList.remove('show');
  }

  function showResults() {
    document.getElementById('results').classList.add('show');
  }

  function showError(message) {
    document.getElementById('errorMessage').textContent = message;
    document.getElementById('error').classList.add('show');
  }

  function hideError() {
    document.getElementById('error').classList.remove('show');
  }
</script> 