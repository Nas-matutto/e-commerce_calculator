---
import Layout from '~/layouts/PageLayout.astro';

const metadata = {
  title: 'Free E-commerce Calculator - Calculate Costs, Profits & Margins | Selling with Nas',
  description: 'Free e-commerce cost calculator to determine product profitability, VAT calculations, profit margins, and units needed to reach your revenue targets. Essential tool for online sellers and dropshippers.',
  keywords: 'e-commerce calculator, profit margin calculator, cost calculator, dropshipping calculator, product pricing tool, VAT calculator, online business calculator',
  canonical: 'https://www.sellingwithnas.com/tools/E-commerce_calculator',
};
---

<Layout metadata={metadata}>
  <!-- Calculator Content -->
  <div class="calculator-page">
    <div class="floating-elements">
      <div class="floating-circle"></div>
      <div class="floating-circle"></div>
      <div class="floating-circle"></div>
    </div>

    <div class="container">
      <div class="header">
        <h1>E-commerce Calculator</h1>
        <p>Calculate your product costs, margins, and revenue targets</p>
      </div>

      <div class="calculator-grid">
        <div class="input-section">
          <h2 class="section-title">Product Costs</h2>
          
          <div class="input-group">
            <label for="costPrice">Cost Price ($)</label>
            <input type="number" id="costPrice" placeholder="0.00" step="0.01" min="0">
          </div>

          <div class="input-group">
            <label for="transportationCosts">Transportation Costs ($)</label>
            <input type="number" id="transportationCosts" placeholder="0.00" step="0.01" min="0">
          </div>

          <div class="input-group">
            <label for="storingCosts">Storing Costs ($)</label>
            <input type="number" id="storingCosts" placeholder="0.00" step="0.01" min="0">
          </div>

          <div class="input-group">
            <label for="deliveryCosts">Delivery Costs ($)</label>
            <input type="number" id="deliveryCosts" placeholder="0.00" step="0.01" min="0">
          </div>

          <div class="input-group">
            <label for="vat">VAT (%)</label>
            <input type="number" id="vat" placeholder="0.00" step="0.01" min="0" max="100">
          </div>

          <div class="input-group">
            <label for="cac">Customer Acquisition Cost ($)</label>
            <input type="number" id="cac" placeholder="0.00" step="0.01" min="0">
          </div>

          <div class="input-group">
            <label for="productPrice">Product Price ($)</label>
            <input type="number" id="productPrice" placeholder="0.00" step="0.01" min="0">
          </div>

          <div class="input-group">
            <label for="targetProfit">Target Profit ($) Per Month</label>
            <input type="number" id="targetProfit" class="target-revenue" placeholder="0.00" step="0.01" min="0">
          </div>
        </div>

        <div class="results-section">
          <h2 class="section-title">Results</h2>
          
          <div class="result-item">
            <span class="result-label">Total Costs per Unit:</span>
            <span class="result-value" id="totalCosts">$0.00</span>
          </div>

          <div class="result-item highlight-result">
            <span class="result-label">Revenue per Unit:</span>
            <span class="result-value" id="revenuePerUnit">$0.00</span>
          </div>

          <div class="result-item">
            <span class="result-label">Profit per Unit:</span>
            <span class="result-value" id="profitPerUnit">$0.00</span>
          </div>

          <div class="result-item">
            <span class="result-label">Percentage Margin:</span>
            <span class="result-value" id="percentageMargin">0%</span>
          </div>

          <div class="units-needed">
            <h3 id="unitsTitle">Units Needed for Monthly Profit Target</h3>
            <div class="units-number" id="unitsNeeded">0</div>
            <div id="profitabilityMessage" style="margin-top: 15px; font-size: 1.1rem; font-weight: 600;"></div>
          </div>

          <div class="result-item highlight-result" style="margin-top: 20px;">
            <span class="result-label">Revenue based on Units Target:</span>
            <span class="result-value" id="revenueFromUnits">$0.00</span>
          </div>
        </div>
      </div>

      <!-- Back to home button -->
      <div style="text-align: center; margin: 40px 0;">
        <a href="/" class="btn btn-secondary">‚Üê Back to Home</a>
      </div>
    </div>
  </div>

  <script type="application/ld+json">
{
  "@context": "https://schema.org",
  "@type": "WebApplication",
  "name": "E-commerce Cost Calculator",
  "description": "Free calculator to determine e-commerce product costs, profit margins, VAT calculations, and units needed to reach revenue targets",
  "url": "https://www.sellingwithnas.com/tools/E-commerce_calculator",
  "applicationCategory": "BusinessApplication",
  "operatingSystem": "Web Browser",
  "offers": {
    "@type": "Offer",
    "price": "0",
    "priceCurrency": "USD"
  },
  "creator": {
    "@type": "Person",
    "name": "Nas",
    "url": "https://www.sellingwithnas.com"
  },
  "featureList": [
    "Calculate total product costs",
    "Determine profit margins",
    "VAT calculations",
    "Revenue target planning",
    "Units needed calculator"
  ]
}
</script>

</Layout>

<style>
  .calculator-page {
    background: linear-gradient(135deg, #f0f9ff 0%, #e0f2fe 50%, #bae6fd 100%);
    min-height: 100vh;
    color: #0f172a;
    overflow-x: hidden;
    padding-top: 80px;
  }

  .calculator-page * {
    box-sizing: border-box;
  }

  .container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 20px;
    min-height: calc(100vh - 80px);
    display: flex;
    flex-direction: column;
    justify-content: center;
  }

  .header {
    text-align: center;
    margin-bottom: 40px;
    position: relative;
  }

  .header h1 {
    font-size: 3rem;
    font-weight: 700;
    background: linear-gradient(45deg, #3b82f6, #8b5cf6, #ef4444);
    background-size: 200% 200%;
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
    animation: gradientShift 3s ease-in-out infinite;
    text-shadow: 0 0 30px rgba(59, 130, 246, 0.3);
    margin: 0;
  }

  .header p {
    font-size: 1.2rem;
    color: #475569;
    margin-top: 10px;
  }

  @keyframes gradientShift {
    0%, 100% { background-position: 0% 50%; }
    50% { background-position: 100% 50%; }
  }

  .calculator-grid {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 40px;
    margin-bottom: 40px;
  }

  @media (max-width: 768px) {
    .calculator-grid {
      grid-template-columns: 1fr;
      gap: 30px;
    }
    
    .header h1 {
      font-size: 2.2rem;
    }
    
    .container {
      padding: 15px;
    }
    
    .input-section, .results-section {
      padding: 20px;
    }
  }

  .input-section, .results-section {
    background: rgba(255, 255, 255, 0.9);
    border-radius: 20px;
    padding: 30px;
    backdrop-filter: blur(10px);
    border: 1px solid rgba(59, 130, 246, 0.2);
    box-shadow: 0 20px 40px rgba(59, 130, 246, 0.1);
    transition: all 0.3s ease;
  }

  .input-section:hover, .results-section:hover {
    transform: translateY(-5px);
    box-shadow: 0 25px 50px rgba(59, 130, 246, 0.15);
  }

  .section-title {
    font-size: 1.8rem;
    margin-bottom: 25px;
    color: #3b82f6;
    text-align: center;
    position: relative;
  }

  .section-title::after {
    content: '';
    position: absolute;
    bottom: -10px;
    left: 50%;
    transform: translateX(-50%);
    width: 60px;
    height: 3px;
    background: linear-gradient(90deg, #3b82f6, #8b5cf6);
    border-radius: 2px;
  }

  .input-group {
    margin-bottom: 20px;
  }

  .input-group label {
    display: block;
    margin-bottom: 8px;
    font-weight: 600;
    color: #0f172a;
    font-size: 0.95rem;
  }

  .input-group input {
    width: 100%;
    padding: 15px 20px;
    border: 2px solid rgba(59, 130, 246, 0.2);
    border-radius: 12px;
    background: rgba(255, 255, 255, 0.7);
    color: #0f172a;
    font-size: 1rem;
    transition: all 0.3s ease;
    backdrop-filter: blur(5px);
  }

  .input-group input:focus {
    outline: none;
    border-color: #3b82f6;
    box-shadow: 0 0 20px rgba(59, 130, 246, 0.2);
    background: rgba(255, 255, 255, 0.9);
    transform: translateY(-2px);
  }

  .input-group input::placeholder {
    color: #94a3b8;
  }

  .target-revenue {
    background: rgba(59, 130, 246, 0.1) !important;
    border: 2px solid rgba(59, 130, 246, 0.4) !important;
  }

  .result-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 15px 20px;
    margin-bottom: 15px;
    background: rgba(255, 255, 255, 0.6);
    border-radius: 12px;
    border: 1px solid rgba(59, 130, 246, 0.1);
    transition: all 0.3s ease;
  }

  .result-label {
    font-weight: 600;
    color: #0f172a;
  }

  .result-value {
    font-size: 1.2rem;
    font-weight: 700;
    color: #3b82f6;
  }

  .result-value.positive {
    color: #059669;
  }

  .result-value.negative {
    color: #dc2626;
  }

  .highlight-result {
    background: linear-gradient(135deg, rgba(59, 130, 246, 0.15), rgba(139, 92, 246, 0.15));
    border: 2px solid rgba(59, 130, 246, 0.4);
    transform: scale(1.02);
    box-shadow: 0 10px 30px rgba(59, 130, 246, 0.2);
  }

  .units-needed {
    text-align: center;
    padding: 25px;
    background: linear-gradient(135deg, rgba(59, 130, 246, 0.15), rgba(139, 92, 246, 0.15));
    border-radius: 16px;
    border: 2px solid rgba(59, 130, 246, 0.4);
    margin-top: 20px;
  }

  .units-needed h3 {
    color: #3b82f6;
    margin-bottom: 10px;
    font-size: 1.3rem;
  }

  .units-number {
    font-size: 2.5rem;
    font-weight: 900;
    color: #0f172a;
    text-shadow: 0 0 20px rgba(59, 130, 246, 0.5);
  }

  .floating-elements {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    pointer-events: none;
    z-index: -1;
  }

  .floating-circle {
    position: absolute;
    border-radius: 50%;
    background: linear-gradient(45deg, rgba(59, 130, 246, 0.1), rgba(139, 92, 246, 0.1));
    animation: float 6s ease-in-out infinite;
  }

  .floating-circle:nth-child(1) {
    width: 80px;
    height: 80px;
    top: 20%;
    left: 10%;
    animation-delay: 0s;
  }

  .floating-circle:nth-child(2) {
    width: 120px;
    height: 120px;
    top: 60%;
    right: 15%;
    animation-delay: 2s;
  }

  .floating-circle:nth-child(3) {
    width: 60px;
    height: 60px;
    bottom: 20%;
    left: 20%;
    animation-delay: 4s;
  }

  @keyframes float {
    0%, 100% { transform: translateY(0px) rotate(0deg); }
    50% { transform: translateY(-20px) rotate(180deg); }
  }

  /* Button styles */
  .btn {
    display: inline-block;
    padding: 12px 24px;
    border-radius: 12px;
    text-decoration: none;
    font-weight: 600;
    text-align: center;
    transition: all 0.3s ease;
    backdrop-filter: blur(10px);
  }

  .btn-secondary {
    background: transparent;
    color: #3b82f6;
    border: 2px solid #3b82f6;
  }

  .btn-secondary:hover {
    background: #3b82f6;
    color: white;
    transform: translateY(-2px);
    box-shadow: 0 8px 25px rgba(59, 130, 246, 0.4);
  }

  /* Dark mode support */
  :global(.dark) .calculator-page {
    background: linear-gradient(135deg, #0f0f23 0%, #1a1a2e 50%, #16213e 100%);
    color: #ffffff;
  }

  :global(.dark) .header p {
    color: #a0a0a0;
  }

  :global(.dark) .header h1 {
    background: linear-gradient(45deg, #00d4ff, #5865f2, #ff6b6b);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    text-shadow: 0 0 30px rgba(0, 212, 255, 0.3);
  }

  :global(.dark) .input-section,
  :global(.dark) .results-section {
    background: rgba(255, 255, 255, 0.05);
    border: 1px solid rgba(255, 255, 255, 0.1);
    box-shadow: 0 20px 40px rgba(0, 0, 0, 0.2);
  }

  :global(.dark) .section-title {
    color: #00d4ff;
  }

  :global(.dark) .section-title::after {
    background: linear-gradient(90deg, #00d4ff, #5865f2);
  }

  :global(.dark) .input-group label {
    color: #e0e0e0;
  }

  :global(.dark) .input-group input {
    background: rgba(255, 255, 255, 0.05);
    border: 2px solid rgba(255, 255, 255, 0.1);
    color: #ffffff;
  }

  :global(.dark) .input-group input:focus {
    border-color: #00d4ff;
    box-shadow: 0 0 20px rgba(0, 212, 255, 0.2);
    background: rgba(255, 255, 255, 0.08);
  }

  :global(.dark) .target-revenue {
    background: rgba(0, 212, 255, 0.1) !important;
    border: 2px solid rgba(0, 212, 255, 0.3) !important;
  }

  :global(.dark) .result-item {
    background: rgba(255, 255, 255, 0.03);
    border: 1px solid rgba(255, 255, 255, 0.05);
  }

  :global(.dark) .result-label {
    color: #e0e0e0;
  }

  :global(.dark) .result-value {
    color: #00d4ff;
  }

  :global(.dark) .highlight-result {
    background: linear-gradient(135deg, rgba(0, 212, 255, 0.1), rgba(88, 101, 242, 0.1));
    border: 2px solid rgba(0, 212, 255, 0.3);
  }

  :global(.dark) .units-needed {
    background: linear-gradient(135deg, rgba(0, 212, 255, 0.15), rgba(88, 101, 242, 0.15));
    border: 2px solid rgba(0, 212, 255, 0.4);
  }

  :global(.dark) .units-needed h3 {
    color: #00d4ff;
  }

  :global(.dark) .units-number {
    color: #ffffff;
    text-shadow: 0 0 20px rgba(0, 212, 255, 0.5);
  }

  :global(.dark) .floating-circle {
    background: linear-gradient(45deg, rgba(0, 212, 255, 0.1), rgba(88, 101, 242, 0.1));
  }

  :global(.dark) .btn-secondary {
    color: #00d4ff;
    border-color: #00d4ff;
  }

  :global(.dark) .btn-secondary:hover {
    background: #00d4ff;
    color: #0f0f23;
  }
</style>

<script>
  function calculateResults() {
    console.log('calculateResults called');
    
    // Get all input values
    const costPrice = parseFloat(document.getElementById('costPrice')?.value) || 0;
    const transportationCosts = parseFloat(document.getElementById('transportationCosts')?.value) || 0;
    const storingCosts = parseFloat(document.getElementById('storingCosts')?.value) || 0;
    const deliveryCosts = parseFloat(document.getElementById('deliveryCosts')?.value) || 0;
    const vatPercent = parseFloat(document.getElementById('vat')?.value) || 0;
    const cac = parseFloat(document.getElementById('cac')?.value) || 0;
    const productPrice = parseFloat(document.getElementById('productPrice')?.value) || 0;
    const targetProfit = parseFloat(document.getElementById('targetProfit')?.value) || 0;

    console.log('Input values:', {
      costPrice, transportationCosts, storingCosts, deliveryCosts, 
      vatPercent, cac, productPrice, targetProfit
    });

    // Calculate VAT amount (percentage of cost price)
    const vatAmount = (costPrice * vatPercent) / 100;
    console.log('VAT calculation:', { costPrice, vatPercent, vatAmount });

    // Calculate total costs (including VAT on cost price)
    const totalCosts = costPrice + vatAmount + transportationCosts + storingCosts + deliveryCosts + cac;

    // Calculate revenue per unit (same as product price)
    const revenuePerUnit = productPrice;

    // Calculate profit per unit
    const profitPerUnit = revenuePerUnit - totalCosts;
    const percentageMargin = revenuePerUnit > 0 ? (profitPerUnit / revenuePerUnit) * 100 : 0;

    // Calculate units needed for target profit
    let unitsNeeded = 0;
    let profitabilityMessage = '';
    
    if (profitPerUnit > 0) {
      unitsNeeded = targetProfit > 0 ? Math.ceil(targetProfit / profitPerUnit) : 0;
      const unitsTitle = document.getElementById('unitsTitle');
      const unitsNeededEl = document.getElementById('unitsNeeded');
      
      if (unitsTitle) unitsTitle.textContent = 'Units Needed for Monthly Profit Target';
      if (unitsNeededEl) unitsNeededEl.textContent = unitsNeeded.toLocaleString();
      profitabilityMessage = '';
    } else if (profitPerUnit < 0) {
      const lossAmount = Math.abs(profitPerUnit);
      const unitsTitle = document.getElementById('unitsTitle');
      const unitsNeededEl = document.getElementById('unitsNeeded');
      
      if (unitsTitle) unitsTitle.textContent = 'Product Analysis';
      if (unitsNeededEl) unitsNeededEl.textContent = 'Not Profitable';
      profitabilityMessage = `The product is not profitable, you are set to make a loss of $${lossAmount.toFixed(2)} per unit`;
      unitsNeeded = 0;
    } else {
      const unitsTitle = document.getElementById('unitsTitle');
      const unitsNeededEl = document.getElementById('unitsNeeded');
      
      if (unitsTitle) unitsTitle.textContent = 'Units Needed for Monthly Profit Target';
      if (unitsNeededEl) unitsNeededEl.textContent = '0';
      profitabilityMessage = 'Break-even: No profit or loss per unit';
      unitsNeeded = 0;
    }

    // Calculate revenue based on units target
    const revenueFromUnits = unitsNeeded * revenuePerUnit;
    console.log('Revenue calculation:', { unitsNeeded, revenuePerUnit, revenueFromUnits });

    // Update all displays with null checks
    const totalCostsEl = document.getElementById('totalCosts');
    const revenuePerUnitEl = document.getElementById('revenuePerUnit');
    const profitPerUnitElement = document.getElementById('profitPerUnit');
    const percentageMarginElement = document.getElementById('percentageMargin');
    const messageElement = document.getElementById('profitabilityMessage');
    const revenueFromUnitsEl = document.getElementById('revenueFromUnits');

    if (totalCostsEl) totalCostsEl.textContent = `$${totalCosts.toFixed(2)}`;
    if (revenuePerUnitEl) revenuePerUnitEl.textContent = `$${revenuePerUnit.toFixed(2)}`;
    
    if (profitPerUnitElement) {
      profitPerUnitElement.textContent = `$${profitPerUnit.toFixed(2)}`;
      profitPerUnitElement.className = profitPerUnit >= 0 ? 'result-value positive' : 'result-value negative';
    }

    if (percentageMarginElement) {
      percentageMarginElement.textContent = `${percentageMargin.toFixed(1)}%`;
      percentageMarginElement.className = percentageMargin >= 0 ? 'result-value positive' : 'result-value negative';
    }

    // Update profitability message
    if (messageElement) {
      messageElement.textContent = profitabilityMessage;
      messageElement.style.color = profitPerUnit < 0 ? '#dc2626' : '#059669';
    }

    // Update revenue from units
    if (revenueFromUnitsEl) revenueFromUnitsEl.textContent = `$${revenueFromUnits.toFixed(2)}`;
  }

  function initializeCalculator() {
    console.log('Initializing calculator...');
    
    // Get all input fields and add event listeners
    const inputFields = [
      'costPrice', 'transportationCosts', 'storingCosts', 'deliveryCosts', 
      'vat', 'cac', 'productPrice', 'targetProfit'
    ];

    let allFieldsFound = true;

    inputFields.forEach(fieldId => {
      const field = document.getElementById(fieldId);
      if (field) {
        field.addEventListener('input', calculateResults);
        field.addEventListener('change', calculateResults);
        console.log(`Event listeners added to ${fieldId}`);
      } else {
        console.error(`Field ${fieldId} not found`);
        allFieldsFound = false;
      }
    });

    if (allFieldsFound) {
      console.log('All fields found, running initial calculation');
      // Initial calculation
      calculateResults();
    } else {
      console.log('Some fields missing, retrying in 100ms...');
      setTimeout(initializeCalculator, 100);
    }
  }

  // Multiple initialization methods to handle different loading scenarios
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeCalculator);
  } else {
    // DOM is already loaded
    initializeCalculator();
  }

  // Also try after a small delay for navigation cases
  setTimeout(initializeCalculator, 50);

  // Additional fallback for Astro navigation
  document.addEventListener('astro:page-load', initializeCalculator);
</script>